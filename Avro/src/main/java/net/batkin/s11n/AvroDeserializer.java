package net.batkin.s11n;

import net.batkin.s11n.avro.generated.AvroOrder;
import net.batkin.s11n.data.BenchmarkRunner;
import net.batkin.s11n.data.model.Order;
import org.apache.avro.file.DataFileReader;
import org.apache.avro.file.SeekableByteArrayInput;
import org.apache.avro.io.BinaryDecoder;
import org.apache.avro.io.DatumReader;
import org.apache.avro.io.DecoderFactory;
import org.apache.avro.specific.SpecificDatumReader;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.List;

import static net.batkin.s11n.AvroSerializer.*;
import static net.batkin.s11n.data.BenchmarkRun.r;
import static net.batkin.s11n.data.DataGenerator.NUM_ORDERS;
import static net.batkin.s11n.data.DataGenerator.NUM_RUNS;
import static net.batkin.s11n.data.Util.sumArrayLengths;

public class AvroDeserializer {

    private static final String OPERATION_DESERIALIZE = "Deserialize";

    public static void main(String[] args) throws Exception {
        BenchmarkRunner runner = new BenchmarkRunner(NUM_RUNS);
        runBenchmarks(NUM_ORDERS, runner);
        runner.dumpCsv(System.out);
    }

    public static void runBenchmarks(int numOrders, BenchmarkRunner runner) {
        List<AvroOrder> avroOrders = generateAvroOrders(numOrders);
        System.out.println("Generated orders for Deserializer");
        byte[] oneBlobWithSchema = serializeOneByteArrayWithSchema(avroOrders);
        System.out.println("Generated bytes for Deserializer (1)");
        byte[] oneBlobWithoutSchema = serializeOneByteArrayWithoutSchema(avroOrders);
        System.out.println("Generated bytes for Deserializer (2)");
        List<byte[]> manyBlobsWithSchema = serializeManyByteArraysWithSchemaReuseSerializer(avroOrders);
        System.out.println("Generated bytes for Deserializer (3)");
        List<byte[]> manyBlobsWithoutSchema = serializeManyByteArraysWithoutSchemaReuseSerializer(avroOrders);;
        System.out.println("Generated bytes for Deserializer (4)");
        int manyBlobsWithSchemaLen = sumArrayLengths(manyBlobsWithSchema);
        int manyBlobsWithoutSchemaLen = sumArrayLengths(manyBlobsWithoutSchema);

        runner.runBenchmarks(
                r("With Schema, One Byte Array", OPERATION_DESERIALIZE, oneBlobWithSchema.length, oneBlobWithSchema, AvroDeserializer::deserializeOneByteArrayWithSchema),
                r("Without Schema, One Byte Array", OPERATION_DESERIALIZE, oneBlobWithoutSchema.length, oneBlobWithoutSchema, AvroDeserializer::deserializeOneByteArrayWithoutSchema),
                r("With Schema, Many Byte Arrays, New Deserializer", OPERATION_DESERIALIZE, manyBlobsWithSchemaLen, manyBlobsWithSchema, AvroDeserializer::deserializeManyByteArraysWithSchemaNewDeserializer),
                r("Without Schema, Many Byte Arrays, New Deserializer", OPERATION_DESERIALIZE, manyBlobsWithoutSchemaLen, manyBlobsWithoutSchema, AvroDeserializer::deserializeManyByteArraysWithoutSchemaNewDeserializer),
                r("With Schema, Many Byte Arrays, Reuse Deserializer", OPERATION_DESERIALIZE, manyBlobsWithSchemaLen, manyBlobsWithSchema, AvroDeserializer::deserializeManyByteArraysWithSchemaReuseDeserializer),
                r("Without Schema, Many Byte Arrays, Reuse Deserializer", OPERATION_DESERIALIZE, manyBlobsWithoutSchemaLen, manyBlobsWithoutSchema, AvroDeserializer::deserializeManyByteArraysWithoutSchemaReuseDeserializer)
        );
    }

    private static int deserializeOneByteArrayWithSchema(byte[] blob) {
        try {
            DatumReader<AvroOrder> datumReader = new SpecificDatumReader<>(AvroOrder.getClassSchema());
            DataFileReader<AvroOrder> dataFileReader = new DataFileReader<>(new SeekableByteArrayInput(blob), datumReader);
            AvroOrder avroOrder = null;
            int numOrders = 0;
            while (dataFileReader.hasNext()) {
                avroOrder = dataFileReader.next(avroOrder);
                numOrders++;
            }
            return numOrders;
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    private static int deserializeOneByteArrayWithoutSchema(byte[] blob) {
        try {
            DatumReader<AvroOrder> datumReader = new SpecificDatumReader<>(AvroOrder.getClassSchema());
            BinaryDecoder decoder = DecoderFactory.get().binaryDecoder(new ByteArrayInputStream(blob), null);
            AvroOrder avroOrder = null;
            int numOrders = 0;
            while (!decoder.isEnd()) {
                avroOrder = datumReader.read(avroOrder, decoder);
                numOrders++;
            }
            return numOrders;
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }


    private static int deserializeManyByteArraysWithSchemaNewDeserializer(List<byte[]> blobs) {
        try {
            int numOrders = 0;
            for (byte[] blob : blobs) {
                DatumReader<AvroOrder> datumReader = new SpecificDatumReader<>(AvroOrder.getClassSchema());
                DataFileReader<AvroOrder> dataFileReader = new DataFileReader<>(new SeekableByteArrayInput(blob), datumReader);
                AvroOrder avroOrder = dataFileReader.next();
                numOrders++;
            }
            return numOrders;
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    private static int deserializeManyByteArraysWithoutSchemaNewDeserializer(List<byte[]> blobs) {
        try {
            int numOrders = 0;
            for (byte[] blob : blobs) {
                DatumReader<AvroOrder> datumReader = new SpecificDatumReader<>(AvroOrder.getClassSchema());
                BinaryDecoder decoder = DecoderFactory.get().binaryDecoder(new ByteArrayInputStream(blob), null);
                AvroOrder avroOrder = datumReader.read(null, decoder);
                numOrders++;
            }
            return numOrders;
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    private static int deserializeManyByteArraysWithSchemaReuseDeserializer(List<byte[]> blobs) {
        try {
            DatumReader<AvroOrder> datumReader = new SpecificDatumReader<>(AvroOrder.getClassSchema());
            AvroOrder avroOrder = null;
            int numOrders = 0;
            for (byte[] blob : blobs) {
                DataFileReader<AvroOrder> dataFileReader = new DataFileReader<>(new SeekableByteArrayInput(blob), datumReader);
                avroOrder = dataFileReader.next(avroOrder);
                numOrders++;
            }
            return numOrders;
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    private static int deserializeManyByteArraysWithoutSchemaReuseDeserializer(List<byte[]> blobs) {
        try {
            DatumReader<AvroOrder> datumReader = new SpecificDatumReader<>(AvroOrder.getClassSchema());
            BinaryDecoder decoder = null;
            AvroOrder avroOrder = null;
            int numOrders = 0;
            for (byte[] blob : blobs) {
                decoder = DecoderFactory.get().binaryDecoder(new ByteArrayInputStream(blob), decoder);
                avroOrder = datumReader.read(avroOrder, decoder);
                numOrders++;
            }
            return numOrders;
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    private static Order toOrder(AvroOrder avroOrder) {
        return new Order(avroOrder.getTicker(), avroOrder.getQuantity(), avroOrder.getAccountNumber(), avroOrder.getStrategy());
    }

}
