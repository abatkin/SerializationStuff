package net.batkin.s11n;

import net.batkin.s11n.avro.deserializer.DeserializerWithSchema;
import net.batkin.s11n.avro.deserializer.DeserializerWithoutSchema;
import net.batkin.s11n.avro.generated.AvroOrder;
import net.batkin.s11n.avro.serializer.SerializerWithSchema;
import net.batkin.s11n.avro.serializer.SerializerWithoutSchema;
import net.batkin.s11n.data.BenchmarkRunner;
import net.batkin.s11n.deserializer.DeserializationSet;
import net.batkin.s11n.serializer.SerializationSet;

import java.util.List;

import static net.batkin.s11n.data.DataGenerator.NUM_ORDERS;
import static net.batkin.s11n.data.DataGenerator.NUM_RUNS;

public class AvroDeserializer<T> {

    public static final String OPERATION_DESERIALIZE = "Deserialize";

    public static void main(String[] args) throws Exception {
        AvroDeserializer<AvroOrder> deserializer = new AvroDeserializer<>(new SimpleOrderDataGenerator());

        BenchmarkRunner runner = new BenchmarkRunner(NUM_RUNS);
        deserializer.runBenchmarks(NUM_ORDERS, runner);
        runner.dumpCsv(System.out);
    }

    public AvroDeserializer(AvroDataGenerator<T> dataGenerator) {
        this.dataGenerator = dataGenerator;
    }

    private AvroDataGenerator<T> dataGenerator;
    
    public void runBenchmarks(int numItems, BenchmarkRunner runner) {
        List<T> items = dataGenerator.generateDataSeries(numItems);
        System.out.println("Generated items for Deserializer");

        SerializationSet<T> serializationSetWithSchema = new SerializationSet<>(() -> new SerializerWithSchema<>(dataGenerator.getSchema()));
        SerializationSet<T> serializationSetWithoutSchema = new SerializationSet<>(() -> new SerializerWithoutSchema<>(dataGenerator.getSchema()));

        byte[] oneBlobWithSchema = serializationSetWithSchema.serializeOneByteArray(items);
        System.out.println("Generated bytes for Deserializer (1)");
        byte[] oneBlobWithoutSchema = serializationSetWithoutSchema.serializeOneByteArray(items);
        System.out.println("Generated bytes for Deserializer (2)");
        List<byte[]> manyBlobsWithSchema = serializationSetWithSchema.serializeManyByteArraysWithReuse(items);
        System.out.println("Generated bytes for Deserializer (3)");
        List<byte[]> manyBlobsWithoutSchema = serializationSetWithoutSchema.serializeManyByteArraysWithReuse(items);
        System.out.println("Generated bytes for Deserializer (4)");

        DeserializationSet.runBenchmarks(runner, oneBlobWithSchema, manyBlobsWithSchema, () -> new DeserializerWithSchema<>(dataGenerator.getSchema()));
        DeserializationSet.runBenchmarks(runner, oneBlobWithoutSchema, manyBlobsWithoutSchema, () -> new DeserializerWithoutSchema<>(dataGenerator.getSchema()));
    }

}
