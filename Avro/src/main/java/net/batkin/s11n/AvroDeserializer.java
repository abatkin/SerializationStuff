package net.batkin.s11n;

import net.batkin.s11n.avro.generated.AvroOrder;
import net.batkin.s11n.data.BenchmarkRunner;
import net.batkin.s11n.serializer.SerializerWithSchema;
import net.batkin.s11n.serializer.SerializerWithoutSchema;
import org.apache.avro.file.DataFileReader;
import org.apache.avro.file.SeekableByteArrayInput;
import org.apache.avro.io.BinaryDecoder;
import org.apache.avro.io.DatumReader;
import org.apache.avro.io.DecoderFactory;
import org.apache.avro.specific.SpecificDatumReader;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.List;

import static net.batkin.s11n.data.BenchmarkRun.r;
import static net.batkin.s11n.data.DataGenerator.NUM_ORDERS;
import static net.batkin.s11n.data.DataGenerator.NUM_RUNS;
import static net.batkin.s11n.data.Util.sumArrayLengths;

public class AvroDeserializer<T> {

    private static final String OPERATION_DESERIALIZE = "Deserialize";

    public static void main(String[] args) throws Exception {
        AvroDeserializer<AvroOrder> deserializer = new AvroDeserializer<>(new SimpleOrderDataGenerator());

        BenchmarkRunner runner = new BenchmarkRunner(NUM_RUNS);
        deserializer.runBenchmarks(NUM_ORDERS, runner);
        runner.dumpCsv(System.out);
    }

    public AvroDeserializer(AvroDataGenerator<T> dataGenerator) {
        this.dataGenerator = dataGenerator;
    }

    private AvroDataGenerator<T> dataGenerator;
    
    public void runBenchmarks(int numItems, BenchmarkRunner runner) {
        List<T> items = dataGenerator.generateDataSeries(numItems);
        System.out.println("Generated items for Deserializer");

        SerializationSet<T> serializationSetWithSchema = new SerializationSet<>(() -> new SerializerWithSchema<>(dataGenerator.getSchema()));
        SerializationSet<T> serializationSetWithoutSchema = new SerializationSet<>(() -> new SerializerWithoutSchema<>(dataGenerator.getSchema()));

        byte[] oneBlobWithSchema = serializationSetWithSchema.serializeOneByteArray(items);
        System.out.println("Generated bytes for Deserializer (1)");
        byte[] oneBlobWithoutSchema = serializationSetWithoutSchema.serializeOneByteArray(items);
        System.out.println("Generated bytes for Deserializer (2)");
        List<byte[]> manyBlobsWithSchema = serializationSetWithSchema.serializeManyByteArraysWithReuse(items);
        System.out.println("Generated bytes for Deserializer (3)");
        List<byte[]> manyBlobsWithoutSchema = serializationSetWithoutSchema.serializeManyByteArraysWithReuse(items);
        System.out.println("Generated bytes for Deserializer (4)");
        int manyBlobsWithSchemaLen = sumArrayLengths(manyBlobsWithSchema);
        int manyBlobsWithoutSchemaLen = sumArrayLengths(manyBlobsWithoutSchema);

        runner.runBenchmarks(
                r("With Schema, One Byte Array", OPERATION_DESERIALIZE, oneBlobWithSchema.length, () -> deserializeOneByteArrayWithSchema(oneBlobWithSchema)),
                r("Without Schema, One Byte Array", OPERATION_DESERIALIZE, oneBlobWithoutSchema.length, () -> deserializeOneByteArrayWithoutSchema(oneBlobWithoutSchema)),
                r("With Schema, Many Byte Arrays, New Deserializer", OPERATION_DESERIALIZE, manyBlobsWithSchemaLen, () -> deserializeManyByteArraysWithSchemaNewDeserializer(manyBlobsWithSchema)),
                r("Without Schema, Many Byte Arrays, New Deserializer", OPERATION_DESERIALIZE, manyBlobsWithoutSchemaLen, () -> deserializeManyByteArraysWithoutSchemaNewDeserializer(manyBlobsWithoutSchema)),
                r("With Schema, Many Byte Arrays, Reuse Deserializer", OPERATION_DESERIALIZE, manyBlobsWithSchemaLen, () -> deserializeManyByteArraysWithSchemaReuseDeserializer(manyBlobsWithSchema)),
                r("Without Schema, Many Byte Arrays, Reuse Deserializer", OPERATION_DESERIALIZE, manyBlobsWithoutSchemaLen, () -> deserializeManyByteArraysWithoutSchemaReuseDeserializer(manyBlobsWithoutSchema))
        );
    }

    private int deserializeOneByteArrayWithSchema(byte[] blob) {
        try {
            DatumReader<T> datumReader = new SpecificDatumReader<>(dataGenerator.getSchema());
            DataFileReader<T> dataFileReader = new DataFileReader<>(new SeekableByteArrayInput(blob), datumReader);
            T item = null;
            int numItems = 0;
            while (dataFileReader.hasNext()) {
                item = dataFileReader.next(item);
                numItems++;
            }
            return numItems;
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    private int deserializeOneByteArrayWithoutSchema(byte[] blob) {
        try {
            DatumReader<T> datumReader = new SpecificDatumReader<>(dataGenerator.getSchema());
            BinaryDecoder decoder = DecoderFactory.get().binaryDecoder(new ByteArrayInputStream(blob), null);
            T item = null;
            int numItems = 0;
            while (!decoder.isEnd()) {
                item = datumReader.read(item, decoder);
                numItems++;
            }
            return numItems;
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }


    private int deserializeManyByteArraysWithSchemaNewDeserializer(List<byte[]> blobs) {
        try {
            int numItems = 0;
            for (byte[] blob : blobs) {
                DatumReader<T> datumReader = new SpecificDatumReader<>(dataGenerator.getSchema());
                DataFileReader<T> dataFileReader = new DataFileReader<>(new SeekableByteArrayInput(blob), datumReader);
                T item = dataFileReader.next();
                numItems++;
            }
            return numItems;
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    private int deserializeManyByteArraysWithoutSchemaNewDeserializer(List<byte[]> blobs) {
        try {
            int numItems = 0;
            for (byte[] blob : blobs) {
                DatumReader<T> datumReader = new SpecificDatumReader<>(dataGenerator.getSchema());
                BinaryDecoder decoder = DecoderFactory.get().binaryDecoder(new ByteArrayInputStream(blob), null);
                T item = datumReader.read(null, decoder);
                numItems++;
            }
            return numItems;
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    private int deserializeManyByteArraysWithSchemaReuseDeserializer(List<byte[]> blobs) {
        try {
            DatumReader<T> datumReader = new SpecificDatumReader<>(dataGenerator.getSchema());
            T item = null;
            int numItems = 0;
            for (byte[] blob : blobs) {
                DataFileReader<T> dataFileReader = new DataFileReader<>(new SeekableByteArrayInput(blob), datumReader);
                item = dataFileReader.next(item);
                numItems++;
            }
            return numItems;
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    private int deserializeManyByteArraysWithoutSchemaReuseDeserializer(List<byte[]> blobs) {
        try {
            DatumReader<T> datumReader = new SpecificDatumReader<>(dataGenerator.getSchema());
            BinaryDecoder decoder = null;
            T item = null;
            int numItems = 0;
            for (byte[] blob : blobs) {
                decoder = DecoderFactory.get().binaryDecoder(new ByteArrayInputStream(blob), decoder);
                item = datumReader.read(item, decoder);
                numItems++;
            }
            return numItems;
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

}
