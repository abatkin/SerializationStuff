/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.batkin.s11n.avro.generated;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AvroOrder extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8232850194200136178L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroOrder\",\"namespace\":\"net.batkin.s11n.avro.generated\",\"fields\":[{\"name\":\"ticker\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"quantity\",\"type\":\"long\"},{\"name\":\"accountNumber\",\"type\":\"int\"},{\"name\":\"strategy\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String ticker;
  @Deprecated public long quantity;
  @Deprecated public int accountNumber;
  @Deprecated public java.lang.String strategy;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroOrder() {}

  /**
   * All-args constructor.
   * @param ticker The new value for ticker
   * @param quantity The new value for quantity
   * @param accountNumber The new value for accountNumber
   * @param strategy The new value for strategy
   */
  public AvroOrder(java.lang.String ticker, java.lang.Long quantity, java.lang.Integer accountNumber, java.lang.String strategy) {
    this.ticker = ticker;
    this.quantity = quantity;
    this.accountNumber = accountNumber;
    this.strategy = strategy;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ticker;
    case 1: return quantity;
    case 2: return accountNumber;
    case 3: return strategy;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ticker = (java.lang.String)value$; break;
    case 1: quantity = (java.lang.Long)value$; break;
    case 2: accountNumber = (java.lang.Integer)value$; break;
    case 3: strategy = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'ticker' field.
   * @return The value of the 'ticker' field.
   */
  public java.lang.String getTicker() {
    return ticker;
  }

  /**
   * Sets the value of the 'ticker' field.
   * @param value the value to set.
   */
  public void setTicker(java.lang.String value) {
    this.ticker = value;
  }

  /**
   * Gets the value of the 'quantity' field.
   * @return The value of the 'quantity' field.
   */
  public java.lang.Long getQuantity() {
    return quantity;
  }

  /**
   * Sets the value of the 'quantity' field.
   * @param value the value to set.
   */
  public void setQuantity(java.lang.Long value) {
    this.quantity = value;
  }

  /**
   * Gets the value of the 'accountNumber' field.
   * @return The value of the 'accountNumber' field.
   */
  public java.lang.Integer getAccountNumber() {
    return accountNumber;
  }

  /**
   * Sets the value of the 'accountNumber' field.
   * @param value the value to set.
   */
  public void setAccountNumber(java.lang.Integer value) {
    this.accountNumber = value;
  }

  /**
   * Gets the value of the 'strategy' field.
   * @return The value of the 'strategy' field.
   */
  public java.lang.String getStrategy() {
    return strategy;
  }

  /**
   * Sets the value of the 'strategy' field.
   * @param value the value to set.
   */
  public void setStrategy(java.lang.String value) {
    this.strategy = value;
  }

  /**
   * Creates a new AvroOrder RecordBuilder.
   * @return A new AvroOrder RecordBuilder
   */
  public static net.batkin.s11n.avro.generated.AvroOrder.Builder newBuilder() {
    return new net.batkin.s11n.avro.generated.AvroOrder.Builder();
  }

  /**
   * Creates a new AvroOrder RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroOrder RecordBuilder
   */
  public static net.batkin.s11n.avro.generated.AvroOrder.Builder newBuilder(net.batkin.s11n.avro.generated.AvroOrder.Builder other) {
    return new net.batkin.s11n.avro.generated.AvroOrder.Builder(other);
  }

  /**
   * Creates a new AvroOrder RecordBuilder by copying an existing AvroOrder instance.
   * @param other The existing instance to copy.
   * @return A new AvroOrder RecordBuilder
   */
  public static net.batkin.s11n.avro.generated.AvroOrder.Builder newBuilder(net.batkin.s11n.avro.generated.AvroOrder other) {
    return new net.batkin.s11n.avro.generated.AvroOrder.Builder(other);
  }

  /**
   * RecordBuilder for AvroOrder instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroOrder>
    implements org.apache.avro.data.RecordBuilder<AvroOrder> {

    private java.lang.String ticker;
    private long quantity;
    private int accountNumber;
    private java.lang.String strategy;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(net.batkin.s11n.avro.generated.AvroOrder.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ticker)) {
        this.ticker = data().deepCopy(fields()[0].schema(), other.ticker);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.quantity)) {
        this.quantity = data().deepCopy(fields()[1].schema(), other.quantity);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.accountNumber)) {
        this.accountNumber = data().deepCopy(fields()[2].schema(), other.accountNumber);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.strategy)) {
        this.strategy = data().deepCopy(fields()[3].schema(), other.strategy);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AvroOrder instance
     * @param other The existing instance to copy.
     */
    private Builder(net.batkin.s11n.avro.generated.AvroOrder other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.ticker)) {
        this.ticker = data().deepCopy(fields()[0].schema(), other.ticker);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.quantity)) {
        this.quantity = data().deepCopy(fields()[1].schema(), other.quantity);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.accountNumber)) {
        this.accountNumber = data().deepCopy(fields()[2].schema(), other.accountNumber);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.strategy)) {
        this.strategy = data().deepCopy(fields()[3].schema(), other.strategy);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'ticker' field.
      * @return The value.
      */
    public java.lang.String getTicker() {
      return ticker;
    }

    /**
      * Sets the value of the 'ticker' field.
      * @param value The value of 'ticker'.
      * @return This builder.
      */
    public net.batkin.s11n.avro.generated.AvroOrder.Builder setTicker(java.lang.String value) {
      validate(fields()[0], value);
      this.ticker = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'ticker' field has been set.
      * @return True if the 'ticker' field has been set, false otherwise.
      */
    public boolean hasTicker() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'ticker' field.
      * @return This builder.
      */
    public net.batkin.s11n.avro.generated.AvroOrder.Builder clearTicker() {
      ticker = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantity' field.
      * @return The value.
      */
    public java.lang.Long getQuantity() {
      return quantity;
    }

    /**
      * Sets the value of the 'quantity' field.
      * @param value The value of 'quantity'.
      * @return This builder.
      */
    public net.batkin.s11n.avro.generated.AvroOrder.Builder setQuantity(long value) {
      validate(fields()[1], value);
      this.quantity = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'quantity' field has been set.
      * @return True if the 'quantity' field has been set, false otherwise.
      */
    public boolean hasQuantity() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'quantity' field.
      * @return This builder.
      */
    public net.batkin.s11n.avro.generated.AvroOrder.Builder clearQuantity() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'accountNumber' field.
      * @return The value.
      */
    public java.lang.Integer getAccountNumber() {
      return accountNumber;
    }

    /**
      * Sets the value of the 'accountNumber' field.
      * @param value The value of 'accountNumber'.
      * @return This builder.
      */
    public net.batkin.s11n.avro.generated.AvroOrder.Builder setAccountNumber(int value) {
      validate(fields()[2], value);
      this.accountNumber = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'accountNumber' field has been set.
      * @return True if the 'accountNumber' field has been set, false otherwise.
      */
    public boolean hasAccountNumber() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'accountNumber' field.
      * @return This builder.
      */
    public net.batkin.s11n.avro.generated.AvroOrder.Builder clearAccountNumber() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'strategy' field.
      * @return The value.
      */
    public java.lang.String getStrategy() {
      return strategy;
    }

    /**
      * Sets the value of the 'strategy' field.
      * @param value The value of 'strategy'.
      * @return This builder.
      */
    public net.batkin.s11n.avro.generated.AvroOrder.Builder setStrategy(java.lang.String value) {
      validate(fields()[3], value);
      this.strategy = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'strategy' field has been set.
      * @return True if the 'strategy' field has been set, false otherwise.
      */
    public boolean hasStrategy() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'strategy' field.
      * @return This builder.
      */
    public net.batkin.s11n.avro.generated.AvroOrder.Builder clearStrategy() {
      strategy = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public AvroOrder build() {
      try {
        AvroOrder record = new AvroOrder();
        record.ticker = fieldSetFlags()[0] ? this.ticker : (java.lang.String) defaultValue(fields()[0]);
        record.quantity = fieldSetFlags()[1] ? this.quantity : (java.lang.Long) defaultValue(fields()[1]);
        record.accountNumber = fieldSetFlags()[2] ? this.accountNumber : (java.lang.Integer) defaultValue(fields()[2]);
        record.strategy = fieldSetFlags()[3] ? this.strategy : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
